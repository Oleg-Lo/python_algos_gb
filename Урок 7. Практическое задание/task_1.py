"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import random
import timeit


def bubble_sort_old(lst_obj):
    n = 1
    length = len(lst_obj)
    num = 0
    for i in range(length - 1):
        num = i + 1
        for j in range(i + 1, length):
            if lst_obj[i] < lst_obj[j]:
                lst_obj[i], lst_obj[j] = lst_obj[j], lst_obj[i]
    return lst_obj, num


def bubble_sort_new(lst_obj):
    n = 1
    length = len(lst_obj)
    num = 0
    for i in range(length - 1):
        is_end = False
        num = i + 1
        for j in range(i + 1, length):
            if lst_obj[i] < lst_obj[j]:
                lst_obj[i], lst_obj[j] = lst_obj[j], lst_obj[i]
                is_end = True
        if not is_end:
            break
    return lst_obj, num


orig_list = [random.randint(-100, 100) for _ in range(20)]
print(orig_list)

#print("new"+str(bubble_sort_new(orig_list)))
#print("old"+str(bubble_sort_old(orig_list)))

# вот будем выводить количество проходов например и без замеров времени видно
# что доработанная функция пройдя раз по уже отсортированному массиву дальше не будет выполняться
# а вот старая функция в любом случае прогонялась 19 раз
"""
[-65, -53, -95, -16, -90, 58, 33, -45, -98, -59, -59, 80, -79, -3, -6, 96, -75, 23, -82, 79]
old([96, 80, 79, 58, 33, 23, -3, -6, -16, -45, -53, -59, -59, -65, -75, -79, -82, -90, -95, -98], 19)
new([96, 80, 79, 58, 33, 23, -3, -6, -16, -45, -53, -59, -59, -65, -75, -79, -82, -90, -95, -98], 1)
"""
# если поменять местами то увидим что на неотсортированном массиве новая функция гонялась 19 раз как и старая
"""
[-88, 3, -78, 8, -26, 2, -51, -39, -70, 20, 1, 16, -60, 2, 38, 63, -35, -82, 97, 45]
new([97, 63, 45, 38, 20, 16, 8, 3, 2, 2, 1, -26, -35, -39, -51, -60, -70, -78, -82, -88], 19)
old([97, 63, 45, 38, 20, 16, 8, 3, 2, 2, 1, -26, -35, -39, -51, -60, -70, -78, -82, -88], 19)
"""


# замеры 10
print(
    timeit.timeit(
        "bubble_sort_new(orig_list[:])",
        globals=globals(),
        number=1000))

orig_list = [random.randint(-100, 100) for _ in range(100)]

# замеры 100
print(
    timeit.timeit(
        "bubble_sort_new(orig_list[:])",
        globals=globals(),
        number=1000))

orig_list = [random.randint(-100, 100) for _ in range(1000)]

# замеры 1000
print(
    timeit.timeit(
        "bubble_sort_new(orig_list[:])",
        globals=globals(),
        number=1000))

"""
new
0.0362114
0.8336719
69.3311917

old
0.042733200000000006
0.7900159
69.0452539
"""
# замеры также показывают что на совсем неотсортированных массивах
# выигрыша нет особо т.к. количество прогонов не уменьшается